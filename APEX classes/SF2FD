public class SF2FD {

    public static String middlewareUri;

    public SF2FD() {
        
    }

    @future (callout=true)
    public static void SendAccount(Id accountId) {
        System.debug('SF2FD.SendAccout(accountId)');
        
        System.PageReference pageReference = new System.PageReference('');
        Map<String,String> requestData = new Map<String,String>{};

        List<Account> accounts;
        String requestQuery;

        // Created company
        accounts = [
            SELECT 
                Id, OwnerId, Description, Fax, Name, Phone, Site, Website
            FROM 
                Account
            WHERE 
                Account.Id = :accountId];
        System.debug('Accounts: ' + accounts);
        

        for (Account accountRecord : accounts) {
            // General information
            requestData.put('class', 'Company');
            requestData.put('Account.Id', accountRecord.Id);
            //requestData.put('Account.CaseNumber', accountRecord.CaseNumber);
            //requestData.put('Account.ContactId', accountRecord.ContactId);
            //requestData.put('Account.ContactEmail', accountRecord.ContactEmail);
            //requestData.put('Account.ContactPhone', accountRecord.ContactPhone);
            //requestData.put('Account.Id', accountRecord.Id);
            requestData.put('Account.OwnerId', accountRecord.OwnerId);
            requestData.put('Account.Description', accountRecord.Description);
            requestData.put('Account.Fax', accountRecord.Fax);
            requestData.put('Account.Name', accountRecord.Name);
            requestData.put('Account.Phone', accountRecord.Phone);
            requestData.put('Account.Site', accountRecord.Site); // Not a website
            requestData.put('Account.Website', accountRecord.Website);
        
            pageReference.getParameters().putAll(requestData);

            requestQuery = pageReference.getUrl();
            if (requestQuery.length() > 0) {
                requestQuery = requestQuery.substring(1, requestQuery.length());
            }
            requestQuery = requestQuery.escapeUnicode();
            System.debug('Query : ' + requestQuery);
        }
    
        HttpRequest req = new HttpRequest();
        req.setEndpoint('http://teleportsystems.co.uk/sf2fd/sf2fd.php');
        req.setMethod('POST');
        req.setBody(requestQuery);
        Http http = new Http();
        HTTPResponse response = http.send(req);
        
        
        try {
            System.debug('Response body from middleware:');
            System.debug(response.getBody());
        } catch(System.CalloutException e) {
            //System.debug('Callout error: '+ e);
            //System.debug(response.toString());
            System.debug('BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB');
        }
    }

    @future (callout=true)
    public static void SendContact(Id contactId) {
        System.debug('SF2FD.SendContact(contactId)');
        
        System.PageReference pageReference = new System.PageReference('');
        Map<String,String> requestData = new Map<String,String>{};
        List<Account> accounts;
        List<Contact> owners;
        String requestQuery;
        
        // Created contact
        List<Contact> contacts = [
            SELECT 
                AccountId, Description, Email, Fax, FirstName, HomePhone, Id, LastName, MobilePhone, Name, OwnerId, Phone
            FROM Contact 
            WHERE Contact.Id = :contactId];
        System.debug('Contacts: ' + contacts);
        
        for (Contact contactRecord : contacts) {
            // General information
            requestData.put('class', 'Contact');
            requestData.put('Contact.AccountId', contactRecord.AccountId);
            requestData.put('Contact.Description', contactRecord.Description);
            requestData.put('Contact.Email', contactRecord.Email);
            requestData.put('Contact.Fax', contactRecord.Fax);
            requestData.put('Contact.FirstName', contactRecord.FirstName);
            requestData.put('Contact.HomePhone', contactRecord.HomePhone);
            requestData.put('Contact.LastName', contactRecord.LastName);
            requestData.put('Contact.MobilePhone', contactRecord.MobilePhone);
            requestData.put('Contact.Name', contactRecord.Name);
            requestData.put('Contact.OwnerId', contactRecord.OwnerId);
            requestData.put('Contact.Phone', contactRecord.Phone);

            // Account search
            accounts = [SELECT Id, Name FROM Account WHERE Account.Id = :contactRecord.AccountId];
            System.debug('Accounts: ' + accounts);
            for (Account account : accounts) {
                requestData.put('Account.Name', account.Name);
            }
            
            // Owner search
            owners = [SELECT Id, Name FROM Contact WHERE Contact.Id = :contactRecord.OwnerId];
            System.debug('Owners: ' + owners);
            for (Contact owner : owners) {
                requestData.put('Account.Name', owner.Name);
            }

            pageReference.getParameters().putAll(requestData);

            requestQuery = pageReference.getUrl();
            if (requestQuery.length() > 0) {
                requestQuery = requestQuery.substring(1, requestQuery.length());
            }
            requestQuery = requestQuery.escapeUnicode();
            System.debug('Query : ' + requestQuery);
        }
    
        HttpRequest req = new HttpRequest();
        req.setEndpoint('http://teleportsystems.co.uk/sf2fd/sf2fd.php');
        req.setMethod('POST');

        req.setBody(requestQuery);
    
        
    
        Http http = new Http();
        HTTPResponse response = http.send(req);
        
        
        try {
            System.debug(response.getBody());
            System.debug('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
        } catch(System.CalloutException e) {
            //System.debug('Callout error: '+ e);
            //System.debug(response.toString());
            System.debug('BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB');
        }
    }

    @future (callout=true)
    public static void SendCase(Id caseId) {
        System.debug('SF2FD.SendCase(caseId)');
        
        System.PageReference pageReference = new System.PageReference('');
        Map<String,String> requestData = new Map<String,String>{};
        List<Contact> contacts;
        List<Account> accounts;
        List<Contact> owners;
        List<CaseComment> comments;
        String requestQuery;

        // Create case
        List<Case> cases = [
            SELECT 
                AccountId, CaseNumber, ContactId, ContactEmail, ContactPhone, Id, OwnerId, 
                Description, Origin, Priority, Status, Subject, Type
            FROM Case 
            WHERE Case.Id = :caseId];
        System.debug('Cases: ' + cases);
        

        for (Case caseRecord : cases) {
            // General information
            requestData.put('class', 'Case');
            requestData.put('Case.AccountId', caseRecord.AccountId);
            requestData.put('Case.CaseNumber', caseRecord.CaseNumber);
            requestData.put('Case.ContactId', caseRecord.ContactId);
            requestData.put('Case.ContactEmail', caseRecord.ContactEmail);
            requestData.put('Case.ContactPhone', caseRecord.ContactPhone);
            requestData.put('Case.Id', caseRecord.Id);
            requestData.put('Case.OwnerId', caseRecord.OwnerId);
            requestData.put('Case.Description', caseRecord.Description);
            requestData.put('Case.Origin', caseRecord.Origin);
            requestData.put('Case.Priority', caseRecord.Priority);
            requestData.put('Case.Status', caseRecord.Status);
            requestData.put('Case.Subject', caseRecord.Subject);
            requestData.put('Case.Type', caseRecord.Type);
        
            // Contact search
            contacts = [SELECT Id, Name FROM Contact WHERE Contact.Id = :caseRecord.ContactId];
            System.debug('Contacts: ' + contacts);
            for (Contact contact : contacts) {
                requestData.put('Contact.Name', contact.Name);
            }
            
            // Account search
            accounts = [SELECT Id, Name FROM Account WHERE Account.Id = :caseRecord.AccountId];
            System.debug('Accounts: ' + accounts);
            for (Account account : accounts) {
                requestData.put('Account.Name', account.Name);
            }
            
            // Owner search
            owners = [SELECT Id, Name FROM Contact WHERE Contact.Id = :caseRecord.OwnerId];
            System.debug('Owners: ' + owners);
            for (Contact owner : owners) {
                requestData.put('Account.Name', owner.Name);
            }
            
            // Comments
            // Only one comment will be recorded
            comments = [SELECT Id, CreatedById, CreatedBy.UserName, CreatedBy.Name, CommentBody FROM CaseComment WHERE CaseComment.ParentId = :caseRecord.Id];
            System.debug('CaseComments: ' + comments);
            for (CaseComment comment : comments) {
                requestData.put('CaseComment.CreatedById', comment.CreatedById);
                requestData.put('CaseComment.CreatedBy.UserName', comment.CreatedBy.UserName);
                requestData.put('CaseComment.CreatedBy.Name', comment.CreatedBy.Name);
                requestData.put('CaseComment.CommentBody', comment.CommentBody);
            }

            pageReference.getParameters().putAll(requestData);

            requestQuery = pageReference.getUrl();
            if (requestQuery.length() > 0) {
                requestQuery = requestQuery.substring(1, requestQuery.length());
            }
            requestQuery = requestQuery.escapeUnicode();
            System.debug('Query : ' + requestQuery);
        }
    
        HttpRequest req = new HttpRequest();
        req.setEndpoint('http://teleportsystems.co.uk/sf2fd/sf2fd.php');
        req.setMethod('POST');

        req.setBody(requestQuery);

        Http http = new Http();
        HTTPResponse response = http.send(req);
        
        
        try {
            System.debug(response.getBody());
            System.debug('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA');
        } catch(System.CalloutException e) {
            //System.debug('Callout error: '+ e);
            //System.debug(response.toString());
            System.debug('BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB');
        }
    }
}
